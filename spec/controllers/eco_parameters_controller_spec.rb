require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe EcoParametersController do
  login_admin

  def mock_eco_parameter(stubs={})
    @mock_eco_parameter ||= mock_model(EcoParameter, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all eco_parameters as @eco_parameters" do
      EcoParameter.stub(:accessible_by) { [mock_eco_parameter].paginate }
      get :index
      assigns(:eco_parameters).should eq([mock_eco_parameter].paginate)
    end
  end

  describe "GET show" do
    it "assigns the requested eco_parameter as @eco_parameter" do
      EcoParameter.stub(:find) { mock_eco_parameter }
      get :show, :id => "37"
      assigns(:eco_parameter).should be(mock_eco_parameter)
    end
  end

  describe "GET new" do
    it "assigns a new eco_parameter as @eco_parameter" do
      EcoParameter.stub(:new) { mock_eco_parameter }
      get :new
      assigns(:eco_parameter).should be(mock_eco_parameter)
    end
  end

  describe "GET edit" do
    it "assigns the requested eco_parameter as @eco_parameter" do
      EcoParameter.stub(:find) { mock_eco_parameter }
      get :edit, :id => "37"
      assigns(:eco_parameter).should be(mock_eco_parameter)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created eco_parameter as @eco_parameter" do
        EcoParameter.stub(:new) { mock_eco_parameter(:save => true) }
        post :create, :eco_parameter => {'these' => 'params'}
        assigns(:eco_parameter).should be(mock_eco_parameter)
      end

      it "redirects to the created eco_parameter" do
        EcoParameter.stub(:new) { mock_eco_parameter(:save => true) }
        post :create, :eco_parameter => {}
        response.should redirect_to(eco_parameter_url(mock_eco_parameter))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved eco_parameter as @eco_parameter" do
        EcoParameter.stub(:new) { mock_eco_parameter(:save => false) }
        post :create, :eco_parameter => {'these' => 'params'}
        assigns(:eco_parameter).should be(mock_eco_parameter)
      end

      it "re-renders the 'new' template" do
        EcoParameter.stub(:new) { mock_eco_parameter(:save => false) }
        post :create, :eco_parameter => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested eco_parameter" do
        EcoParameter.stub(:find) { mock_eco_parameter }
        mock_eco_parameter.should_receive(:update_attributes)
        put :update, :id => "37", :eco_parameter => {'these' => 'params'}
      end

      it "assigns the requested eco_parameter as @eco_parameter" do
        EcoParameter.stub(:find) { mock_eco_parameter(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:eco_parameter).should be(mock_eco_parameter)
      end

      it "redirects to the eco_parameter" do
        EcoParameter.stub(:find) { mock_eco_parameter(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(eco_parameter_url(mock_eco_parameter))
      end
    end

    describe "with invalid params" do
      it "assigns the eco_parameter as @eco_parameter" do
        EcoParameter.stub(:find) { mock_eco_parameter(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:eco_parameter).should be(mock_eco_parameter)
      end

      it "re-renders the 'edit' template" do
        EcoParameter.stub(:find) { mock_eco_parameter(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested eco_parameter" do
      EcoParameter.stub(:find) { mock_eco_parameter }
      mock_eco_parameter.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the eco_parameters list" do
      EcoParameter.stub(:find) { mock_eco_parameter }
      delete :destroy, :id => "1"
      response.should redirect_to(eco_parameters_url)
    end
  end

end
